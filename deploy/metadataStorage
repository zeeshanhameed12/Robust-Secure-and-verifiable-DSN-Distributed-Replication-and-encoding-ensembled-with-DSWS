// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package main

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// MainMetaData contains all meta data concerning the Main contract.
var MainMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"fileName\",\"type\":\"string\"}],\"name\":\"MetadataSaved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_fileName\",\"type\":\"string\"}],\"name\":\"loadMetadata\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"fileName\",\"type\":\"string\"},{\"internalType\":\"int64\",\"name\":\"fileSize\",\"type\":\"int64\"},{\"internalType\":\"int256\",\"name\":\"dataShards\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"parityShards\",\"type\":\"int256\"},{\"internalType\":\"string[]\",\"name\":\"shardHashes\",\"type\":\"string[]\"},{\"internalType\":\"int256[]\",\"name\":\"shardOrder\",\"type\":\"int256[]\"},{\"internalType\":\"string[]\",\"name\":\"ipfsHashes\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_fileName\",\"type\":\"string\"},{\"internalType\":\"int64\",\"name\":\"_fileSize\",\"type\":\"int64\"},{\"internalType\":\"int256\",\"name\":\"_dataShards\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"_parityShards\",\"type\":\"int256\"},{\"internalType\":\"string[]\",\"name\":\"_shardHashes\",\"type\":\"string[]\"},{\"internalType\":\"int256[]\",\"name\":\"_shardOrder\",\"type\":\"int256[]\"},{\"internalType\":\"string[]\",\"name\":\"_ipfsHashes\",\"type\":\"string[]\"}],\"name\":\"saveMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561000f575f80fd5b5061125c8061001d5f395ff3fe608060405234801561000f575f80fd5b5060043610610034575f3560e01c8063e922c83a14610038578063f0f5388614610054575b5f80fd5b610052600480360381019061004d9190610a01565b61008a565b005b61006e60048036038101906100699190610b0e565b6101e2565b6040516100819796959493929190610da7565b60405180910390f35b5f60018860405161009b9190610e6a565b9081526020016040518091039020905087815f0190816100bb9190611083565b5086816001015f6101000a81548167ffffffffffffffff021916908360070b67ffffffffffffffff16021790555085816002018190555084816003018190555083816004019080519060200190610113929190610571565b508281600501908051906020019061012c9291906105c8565b5081816006019080519060200190610145929190610571565b50335f896040516101569190610e6a565b90815260200160405180910390205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fec7d30f6073a02469025874e9ae737382f377de287ca32832c0d5041d7ddf35a886040516101d09190611152565b60405180910390a15050505050505050565b60605f805f60608060603373ffffffffffffffffffffffffffffffffffffffff165f896040516102129190610e6a565b90815260200160405180910390205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610296576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161028d90611208565b60405180910390fd5b5f6001896040516102a79190610e6a565b90815260200160405180910390209050805f01816001015f9054906101000a900460070b826002015483600301548460040185600501866006018680546102ed90610ead565b80601f016020809104026020016040519081016040528092919081815260200182805461031990610ead565b80156103645780601f1061033b57610100808354040283529160200191610364565b820191905f5260205f20905b81548152906001019060200180831161034757829003601f168201915b5050505050965082805480602002602001604051908101604052809291908181526020015f905b82821015610433578382905f5260205f200180546103a890610ead565b80601f01602080910402602001604051908101604052809291908181526020018280546103d490610ead565b801561041f5780601f106103f65761010080835404028352916020019161041f565b820191905f5260205f20905b81548152906001019060200180831161040257829003601f168201915b50505050508152602001906001019061038b565b5050505092508180548060200260200160405190810160405280929190818152602001828054801561048257602002820191905f5260205f20905b81548152602001906001019080831161046e575b5050505050915080805480602002602001604051908101604052809291908181526020015f905b82821015610551578382905f5260205f200180546104c690610ead565b80601f01602080910402602001604051908101604052809291908181526020018280546104f290610ead565b801561053d5780601f106105145761010080835404028352916020019161053d565b820191905f5260205f20905b81548152906001019060200180831161052057829003601f168201915b5050505050815260200190600101906104a9565b505050509050975097509750975097509750975050919395979092949650565b828054828255905f5260205f209081019282156105b7579160200282015b828111156105b65782518290816105a69190611083565b509160200191906001019061058f565b5b5090506105c49190610613565b5090565b828054828255905f5260205f20908101928215610602579160200282015b828111156106015782518255916020019190600101906105e6565b5b50905061060f9190610636565b5090565b5b80821115610632575f81816106299190610651565b50600101610614565b5090565b5b8082111561064d575f815f905550600101610637565b5090565b50805461065d90610ead565b5f825580601f1061066e575061068b565b601f0160209004905f5260205f209081019061068a919061068e565b5b50565b5b808211156106a5575f815f90555060010161068f565b5090565b5f604051905090565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b610708826106c2565b810181811067ffffffffffffffff82111715610727576107266106d2565b5b80604052505050565b5f6107396106a9565b905061074582826106ff565b919050565b5f67ffffffffffffffff821115610764576107636106d2565b5b61076d826106c2565b9050602081019050919050565b828183375f83830152505050565b5f61079a6107958461074a565b610730565b9050828152602081018484840111156107b6576107b56106be565b5b6107c184828561077a565b509392505050565b5f82601f8301126107dd576107dc6106ba565b5b81356107ed848260208601610788565b91505092915050565b5f8160070b9050919050565b61080b816107f6565b8114610815575f80fd5b50565b5f8135905061082681610802565b92915050565b5f819050919050565b61083e8161082c565b8114610848575f80fd5b50565b5f8135905061085981610835565b92915050565b5f67ffffffffffffffff821115610879576108786106d2565b5b602082029050602081019050919050565b5f80fd5b5f6108a061089b8461085f565b610730565b905080838252602082019050602084028301858111156108c3576108c261088a565b5b835b8181101561090a57803567ffffffffffffffff8111156108e8576108e76106ba565b5b8086016108f589826107c9565b855260208501945050506020810190506108c5565b5050509392505050565b5f82601f830112610928576109276106ba565b5b813561093884826020860161088e565b91505092915050565b5f67ffffffffffffffff82111561095b5761095a6106d2565b5b602082029050602081019050919050565b5f61097e61097984610941565b610730565b905080838252602082019050602084028301858111156109a1576109a061088a565b5b835b818110156109ca57806109b6888261084b565b8452602084019350506020810190506109a3565b5050509392505050565b5f82601f8301126109e8576109e76106ba565b5b81356109f884826020860161096c565b91505092915050565b5f805f805f805f60e0888a031215610a1c57610a1b6106b2565b5b5f88013567ffffffffffffffff811115610a3957610a386106b6565b5b610a458a828b016107c9565b9750506020610a568a828b01610818565b9650506040610a678a828b0161084b565b9550506060610a788a828b0161084b565b945050608088013567ffffffffffffffff811115610a9957610a986106b6565b5b610aa58a828b01610914565b93505060a088013567ffffffffffffffff811115610ac657610ac56106b6565b5b610ad28a828b016109d4565b92505060c088013567ffffffffffffffff811115610af357610af26106b6565b5b610aff8a828b01610914565b91505092959891949750929550565b5f60208284031215610b2357610b226106b2565b5b5f82013567ffffffffffffffff811115610b4057610b3f6106b6565b5b610b4c848285016107c9565b91505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f5b83811015610b8c578082015181840152602081019050610b71565b5f8484015250505050565b5f610ba182610b55565b610bab8185610b5f565b9350610bbb818560208601610b6f565b610bc4816106c2565b840191505092915050565b610bd8816107f6565b82525050565b610be78161082c565b82525050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f82825260208201905092915050565b5f610c3082610b55565b610c3a8185610c16565b9350610c4a818560208601610b6f565b610c53816106c2565b840191505092915050565b5f610c698383610c26565b905092915050565b5f602082019050919050565b5f610c8782610bed565b610c918185610bf7565b935083602082028501610ca385610c07565b805f5b85811015610cde5784840389528151610cbf8582610c5e565b9450610cca83610c71565b925060208a01995050600181019050610ca6565b50829750879550505050505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b610d228161082c565b82525050565b5f610d338383610d19565b60208301905092915050565b5f602082019050919050565b5f610d5582610cf0565b610d5f8185610cfa565b9350610d6a83610d0a565b805f5b83811015610d9a578151610d818882610d28565b9750610d8c83610d3f565b925050600181019050610d6d565b5085935050505092915050565b5f60e0820190508181035f830152610dbf818a610b97565b9050610dce6020830189610bcf565b610ddb6040830188610bde565b610de86060830187610bde565b8181036080830152610dfa8186610c7d565b905081810360a0830152610e0e8185610d4b565b905081810360c0830152610e228184610c7d565b905098975050505050505050565b5f81905092915050565b5f610e4482610b55565b610e4e8185610e30565b9350610e5e818560208601610b6f565b80840191505092915050565b5f610e758284610e3a565b915081905092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f6002820490506001821680610ec457607f821691505b602082108103610ed757610ed6610e80565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f60088302610f397fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610efe565b610f438683610efe565b95508019841693508086168417925050509392505050565b5f819050919050565b5f819050919050565b5f610f87610f82610f7d84610f5b565b610f64565b610f5b565b9050919050565b5f819050919050565b610fa083610f6d565b610fb4610fac82610f8e565b848454610f0a565b825550505050565b5f90565b610fc8610fbc565b610fd3818484610f97565b505050565b5b81811015610ff657610feb5f82610fc0565b600181019050610fd9565b5050565b601f82111561103b5761100c81610edd565b61101584610eef565b81016020851015611024578190505b61103861103085610eef565b830182610fd8565b50505b505050565b5f82821c905092915050565b5f61105b5f1984600802611040565b1980831691505092915050565b5f611073838361104c565b9150826002028217905092915050565b61108c82610b55565b67ffffffffffffffff8111156110a5576110a46106d2565b5b6110af8254610ead565b6110ba828285610ffa565b5f60209050601f8311600181146110eb575f84156110d9578287015190505b6110e38582611068565b86555061114a565b601f1984166110f986610edd565b5f5b82811015611120578489015182556001820191506020850194506020810190506110fb565b8683101561113d5784890151611139601f89168261104c565b8355505b6001600288020188555050505b505050505050565b5f6020820190508181035f83015261116a8184610b97565b905092915050565b7f506c65617365207265636865636b207468652066696c65206e616d6520616e645f8201527f206f776e657220616472726573732e204f6e6c79206f776e65722063616e206160208201527f636365737320746865206d65746164617461206f6620746869732066696c652e604082015250565b5f6111f2606083610b5f565b91506111fd82611172565b606082019050919050565b5f6020820190508181035f83015261121f816111e6565b905091905056fea26469706673582212201b84b0c2038e8086c25943e955ef2de9338b6a69008dea6d68cceb3e97d7906164736f6c63430008180033",
}

// MainABI is the input ABI used to generate the binding from.
// Deprecated: Use MainMetaData.ABI instead.
var MainABI = MainMetaData.ABI

// MainBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use MainMetaData.Bin instead.
var MainBin = MainMetaData.Bin

// DeployMain deploys a new Ethereum contract, binding an instance of Main to it.
func DeployMain(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Main, error) {
	parsed, err := MainMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(MainBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Main{MainCaller: MainCaller{contract: contract}, MainTransactor: MainTransactor{contract: contract}, MainFilterer: MainFilterer{contract: contract}}, nil
}

// Main is an auto generated Go binding around an Ethereum contract.
type Main struct {
	MainCaller     // Read-only binding to the contract
	MainTransactor // Write-only binding to the contract
	MainFilterer   // Log filterer for contract events
}

// MainCaller is an auto generated read-only Go binding around an Ethereum contract.
type MainCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MainTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MainTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MainFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MainFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MainSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MainSession struct {
	Contract     *Main             // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MainCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MainCallerSession struct {
	Contract *MainCaller   // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// MainTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MainTransactorSession struct {
	Contract     *MainTransactor   // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MainRaw is an auto generated low-level Go binding around an Ethereum contract.
type MainRaw struct {
	Contract *Main // Generic contract binding to access the raw methods on
}

// MainCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MainCallerRaw struct {
	Contract *MainCaller // Generic read-only contract binding to access the raw methods on
}

// MainTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MainTransactorRaw struct {
	Contract *MainTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMain creates a new instance of Main, bound to a specific deployed contract.
func NewMain(address common.Address, backend bind.ContractBackend) (*Main, error) {
	contract, err := bindMain(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Main{MainCaller: MainCaller{contract: contract}, MainTransactor: MainTransactor{contract: contract}, MainFilterer: MainFilterer{contract: contract}}, nil
}

// NewMainCaller creates a new read-only instance of Main, bound to a specific deployed contract.
func NewMainCaller(address common.Address, caller bind.ContractCaller) (*MainCaller, error) {
	contract, err := bindMain(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MainCaller{contract: contract}, nil
}

// NewMainTransactor creates a new write-only instance of Main, bound to a specific deployed contract.
func NewMainTransactor(address common.Address, transactor bind.ContractTransactor) (*MainTransactor, error) {
	contract, err := bindMain(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MainTransactor{contract: contract}, nil
}

// NewMainFilterer creates a new log filterer instance of Main, bound to a specific deployed contract.
func NewMainFilterer(address common.Address, filterer bind.ContractFilterer) (*MainFilterer, error) {
	contract, err := bindMain(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MainFilterer{contract: contract}, nil
}

// bindMain binds a generic wrapper to an already deployed contract.
func bindMain(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := MainMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Main *MainRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Main.Contract.MainCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Main *MainRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Main.Contract.MainTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Main *MainRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Main.Contract.MainTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Main *MainCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Main.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Main *MainTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Main.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Main *MainTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Main.Contract.contract.Transact(opts, method, params...)
}

// LoadMetadata is a free data retrieval call binding the contract method 0xf0f53886.
//
// Solidity: function loadMetadata(string _fileName) view returns(string fileName, int64 fileSize, int256 dataShards, int256 parityShards, string[] shardHashes, int256[] shardOrder, string[] ipfsHashes)
func (_Main *MainCaller) LoadMetadata(opts *bind.CallOpts, _fileName string) (struct {
	FileName     string
	FileSize     int64
	DataShards   *big.Int
	ParityShards *big.Int
	ShardHashes  []string
	ShardOrder   []*big.Int
	IpfsHashes   []string
}, error) {
	var out []interface{}
	err := _Main.contract.Call(opts, &out, "loadMetadata", _fileName)

	outstruct := new(struct {
		FileName     string
		FileSize     int64
		DataShards   *big.Int
		ParityShards *big.Int
		ShardHashes  []string
		ShardOrder   []*big.Int
		IpfsHashes   []string
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.FileName = *abi.ConvertType(out[0], new(string)).(*string)
	outstruct.FileSize = *abi.ConvertType(out[1], new(int64)).(*int64)
	outstruct.DataShards = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.ParityShards = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.ShardHashes = *abi.ConvertType(out[4], new([]string)).(*[]string)
	outstruct.ShardOrder = *abi.ConvertType(out[5], new([]*big.Int)).(*[]*big.Int)
	outstruct.IpfsHashes = *abi.ConvertType(out[6], new([]string)).(*[]string)

	return *outstruct, err

}

// LoadMetadata is a free data retrieval call binding the contract method 0xf0f53886.
//
// Solidity: function loadMetadata(string _fileName) view returns(string fileName, int64 fileSize, int256 dataShards, int256 parityShards, string[] shardHashes, int256[] shardOrder, string[] ipfsHashes)
func (_Main *MainSession) LoadMetadata(_fileName string) (struct {
	FileName     string
	FileSize     int64
	DataShards   *big.Int
	ParityShards *big.Int
	ShardHashes  []string
	ShardOrder   []*big.Int
	IpfsHashes   []string
}, error) {
	return _Main.Contract.LoadMetadata(&_Main.CallOpts, _fileName)
}

// LoadMetadata is a free data retrieval call binding the contract method 0xf0f53886.
//
// Solidity: function loadMetadata(string _fileName) view returns(string fileName, int64 fileSize, int256 dataShards, int256 parityShards, string[] shardHashes, int256[] shardOrder, string[] ipfsHashes)
func (_Main *MainCallerSession) LoadMetadata(_fileName string) (struct {
	FileName     string
	FileSize     int64
	DataShards   *big.Int
	ParityShards *big.Int
	ShardHashes  []string
	ShardOrder   []*big.Int
	IpfsHashes   []string
}, error) {
	return _Main.Contract.LoadMetadata(&_Main.CallOpts, _fileName)
}

// SaveMetadata is a paid mutator transaction binding the contract method 0xe922c83a.
//
// Solidity: function saveMetadata(string _fileName, int64 _fileSize, int256 _dataShards, int256 _parityShards, string[] _shardHashes, int256[] _shardOrder, string[] _ipfsHashes) returns()
func (_Main *MainTransactor) SaveMetadata(opts *bind.TransactOpts, _fileName string, _fileSize int64, _dataShards *big.Int, _parityShards *big.Int, _shardHashes []string, _shardOrder []*big.Int, _ipfsHashes []string) (*types.Transaction, error) {
	return _Main.contract.Transact(opts, "saveMetadata", _fileName, _fileSize, _dataShards, _parityShards, _shardHashes, _shardOrder, _ipfsHashes)
}

// SaveMetadata is a paid mutator transaction binding the contract method 0xe922c83a.
//
// Solidity: function saveMetadata(string _fileName, int64 _fileSize, int256 _dataShards, int256 _parityShards, string[] _shardHashes, int256[] _shardOrder, string[] _ipfsHashes) returns()
func (_Main *MainSession) SaveMetadata(_fileName string, _fileSize int64, _dataShards *big.Int, _parityShards *big.Int, _shardHashes []string, _shardOrder []*big.Int, _ipfsHashes []string) (*types.Transaction, error) {
	return _Main.Contract.SaveMetadata(&_Main.TransactOpts, _fileName, _fileSize, _dataShards, _parityShards, _shardHashes, _shardOrder, _ipfsHashes)
}

// SaveMetadata is a paid mutator transaction binding the contract method 0xe922c83a.
//
// Solidity: function saveMetadata(string _fileName, int64 _fileSize, int256 _dataShards, int256 _parityShards, string[] _shardHashes, int256[] _shardOrder, string[] _ipfsHashes) returns()
func (_Main *MainTransactorSession) SaveMetadata(_fileName string, _fileSize int64, _dataShards *big.Int, _parityShards *big.Int, _shardHashes []string, _shardOrder []*big.Int, _ipfsHashes []string) (*types.Transaction, error) {
	return _Main.Contract.SaveMetadata(&_Main.TransactOpts, _fileName, _fileSize, _dataShards, _parityShards, _shardHashes, _shardOrder, _ipfsHashes)
}

// MainMetadataSavedIterator is returned from FilterMetadataSaved and is used to iterate over the raw logs and unpacked data for MetadataSaved events raised by the Main contract.
type MainMetadataSavedIterator struct {
	Event *MainMetadataSaved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MainMetadataSavedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MainMetadataSaved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MainMetadataSaved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MainMetadataSavedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MainMetadataSavedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MainMetadataSaved represents a MetadataSaved event raised by the Main contract.
type MainMetadataSaved struct {
	FileName string
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterMetadataSaved is a free log retrieval operation binding the contract event 0xec7d30f6073a02469025874e9ae737382f377de287ca32832c0d5041d7ddf35a.
//
// Solidity: event MetadataSaved(string fileName)
func (_Main *MainFilterer) FilterMetadataSaved(opts *bind.FilterOpts) (*MainMetadataSavedIterator, error) {

	logs, sub, err := _Main.contract.FilterLogs(opts, "MetadataSaved")
	if err != nil {
		return nil, err
	}
	return &MainMetadataSavedIterator{contract: _Main.contract, event: "MetadataSaved", logs: logs, sub: sub}, nil
}

// WatchMetadataSaved is a free log subscription operation binding the contract event 0xec7d30f6073a02469025874e9ae737382f377de287ca32832c0d5041d7ddf35a.
//
// Solidity: event MetadataSaved(string fileName)
func (_Main *MainFilterer) WatchMetadataSaved(opts *bind.WatchOpts, sink chan<- *MainMetadataSaved) (event.Subscription, error) {

	logs, sub, err := _Main.contract.WatchLogs(opts, "MetadataSaved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MainMetadataSaved)
				if err := _Main.contract.UnpackLog(event, "MetadataSaved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMetadataSaved is a log parse operation binding the contract event 0xec7d30f6073a02469025874e9ae737382f377de287ca32832c0d5041d7ddf35a.
//
// Solidity: event MetadataSaved(string fileName)
func (_Main *MainFilterer) ParseMetadataSaved(log types.Log) (*MainMetadataSaved, error) {
	event := new(MainMetadataSaved)
	if err := _Main.contract.UnpackLog(event, "MetadataSaved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
